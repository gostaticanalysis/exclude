package exclude_test

import (
	"fmt"
	"path/filepath"
	"testing"

	"github.com/gostaticanalysis/exclude"
	"golang.org/x/tools/go/analysis/analysistest"
)

func TestGeneratedFile(t *testing.T) {
	t.Parallel()

	cases := map[string]struct {
		src  string
		want bool // is reported?
	}{
		"autogen": {"// Code generated by test; DO NOT EDIT.", false},
		"notautogen":  {"//Code generated by test; DO NOT EDIT.", true},
		"empty": {"", true},
		"blank": {"// Code generated by test; DO NOT EDIT.\n", false},
	}

	for name, tt := range cases {
		name, tt := name, tt
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			path := filepath.Join(name, name+".go")
			dir := writeFiles(t, map[string]string{
				path: fmt.Sprintf("%s\npackage %s", tt.src, name),
			})
			var rec reportRecoder
			analysistest.Run(t, dir, rec.new(exclude.GeneratedFile), name)
			if got := rec.isReported(); got != tt.want {
				t.Errorf("want %v but got %v", tt.want, got)
			}
		})
	}
}

func TestTestFile(t *testing.T) {
	t.Parallel()

	cases := map[string]struct {
		file string
		want bool // is reported?
	}{
		"testfile": {"a_test.go", false},
		"not":  {"a.go", true},
	}

	for name, tt := range cases {
		name, tt := name, tt
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			path := filepath.Join(name, tt.file)
			dir := writeFiles(t, map[string]string{
				path: fmt.Sprintf("package %s", name),
			})
			var rec reportRecoder
			analysistest.Run(t, dir, rec.new(exclude.TestFile), name)
			if got := rec.isReported(); got != tt.want {
				t.Errorf("want %v but got %v", tt.want, got)
			}
		})
	}
}

func TestFileWithPattern(t *testing.T) {
	t.Parallel()

	cases := map[string]struct {
		pattern string
		file    string
		want    bool // is reported?
	}{
		"match": {`^.+\.pb\.go$`, "a.pb.go", false},
		"unmatch":  {`^.+\.pb\.go$`, "a.go", true},
	}

	for name, tt := range cases {
		name, tt := name, tt
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			path := filepath.Join(name, tt.file)
			dir := writeFiles(t, map[string]string{
				path: fmt.Sprintf("package %s", name),
			})
			var rec reportRecoder
			a := rec.new(exclude.FileWithPattern)
			a.Flags.Set("exclude", tt.pattern)
			analysistest.Run(t, dir, a, name)
			if got := rec.isReported(); got != tt.want {
				t.Errorf("want %v but got %v", tt.want, got)
			}
		})
	}
}
